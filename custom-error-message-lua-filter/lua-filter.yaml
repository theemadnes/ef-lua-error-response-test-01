apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: custom-error-filter
  namespace: workload-1 # Replace with your workload's namespace
spec:
  workloadSelector:
    labels:
      app: echoserver # Replace with your workload's label
  configPatches:
  - applyTo: HTTP_FILTER
    #priority: 100
    match:
      listener:
        filterChain:
          filter:
            name: envoy.http_connection_manager
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.config.filter.http.lua.v2.Lua"
          inlineCode: |
            -- Define a function to generate a custom error response
            local function generate_error_response(status_code, message)
              return {
                [":status"] = status_code,
                ["content-type"] = "application/json",
                ["content-length"] = string.len(message),
                [":body"] = message
              }
            end

            -- Define the Envoy filter configuration
            local function envoy_on_response(response_handle)
              -- Get the HTTP status code
              local status_code = response_handle:httpStatusCode()

              -- Check if the status code matches any custom error conditions
              if status_code == 404 then
                -- Generate a custom 404 error response
                local error_message = '{ "error": "Resource not found" }'
                response_handle:headers():replace(":status", "404 Not Found")
                response_handle:setBody(error_message)
              elseif status_code == 502 then
                -- Generate a custom 502 error response
                local error_message = '{ "error": "Bad Gateway: Upstream server error" }'
                response_handle:headers():replace(":status", "502 Bad Gateway")
                response_handle:setBody(error_message)
              end
            end

            -- Register the Envoy filter
            return {
              on_response = envoy_on_response
            }
